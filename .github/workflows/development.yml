name: Development CI

on:
  push:
    branches:
      - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push client image
        run: |
          docker build -t faizal67/veditor-client:latest ./Client
          docker push faizal67/veditor-client:latest

      - name: Build and push server image
        run: |
          docker build -t faizal67/veditor-server:latest ./Server
          docker push faizal67/veditor-server:latest
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install eksctl
        run: |
          if [[ "$(uname -m)" == "x86_64" ]]; then
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" --output eksctl.tar.gz
          elif [[ "$(uname -m)" == "aarch64" ]]; then
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_arm64.tar.gz" --output eksctl.tar.gz
          else
            echo "Unsupported architecture"
            exit 1
          fi
          tar xz -f eksctl.tar.gz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
        

      - name: Configure AWS credentials for eksctl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region ap-south-1

      - name: Create EKS cluster
        run: |
          eksctl create cluster \
            --name veditor-cluster \
            --version 1.3 \
            --region ap-south-1 \
            --nodegroup-name linux-nodes \
            --node-type t3.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2 \
            --managed

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name veditor-cluster --region ap-south-1

      - name: Verify EKS Cluster
        run: eksctl get cluster --name=veditor-cluster --region=ap-south-1

        
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/client-deployment.yaml
          kubectl apply -f k8s/client-service.yaml
          kubectl apply -f k8s/server-deployment.yaml
          kubectl apply -f k8s/server-service.yaml
        
          - name: Wait for client deployment rollout to complete
          run: |
            kubectl rollout status deployment/veditor-client --watch=false
  
      - name: Wait for server deployment rollout to complete
        run: |
          kubectl rollout status deployment/veditor-server --watch=false

      - name: Get the external IP of the client service
        id: get-client-service-ip
        run: |
          echo "::set-output name=CLIENT_EXTERNAL_IP::$(kubectl get svc client-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"

      - name: Get the internal IP of the server service
        id: get-server-service-ip
        run: |
          echo "::set-output name=SERVER_INTERNAL_IP::$(kubectl get svc server-service -o jsonpath='{.spec.clusterIP}')"

      - name: Display service IPs
        run: |
          echo "Client is available at: http://$(echo ${{ steps.get-client-service-ip.outputs.CLIENT_EXTERNAL_IP }})"
          echo "Server is available internally at: $(echo ${{ steps.get-server-service-ip.outputs.SERVER_INTERNAL_IP }})"
